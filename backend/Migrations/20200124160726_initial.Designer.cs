// <auto-generated />
using System;
using BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ProBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200124160726_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackEnd.Models.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("BackEnd.Models.Hourly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CounterQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpId")
                        .HasColumnType("int");

                    b.Property<string>("OpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationJobNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationOpNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OperationuserId")
                        .HasColumnType("int");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.HasIndex("OperationuserId", "OperationJobNumber", "OperationOpNumber");

                    b.ToTable("Hourlys");
                });

            modelBuilder.Entity("BackEnd.Models.Job", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("JobNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bars")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CutOff")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeatLot")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainFacing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatRecieved")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonthReq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Oal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("PartuserId")
                        .HasColumnType("int");

                    b.Property<string>("PossibleQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemainingQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScrapCount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubFacing")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightLength")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightRecieved")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId", "JobNumber");

                    b.HasIndex("PartuserId", "PartNumber1");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("BackEnd.Models.Mach", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentOp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId", "Machine");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("BackEnd.Models.Operation", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("JobNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OpNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CycleTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartsToDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RemainingQuantity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId", "JobNumber", "OpNumber");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("BackEnd.Models.Part", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Active")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rev")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userId", "PartNumber");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("BackEnd.Models.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Average")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InQuestion")
                        .HasColumnType("bit");

                    b.Property<string>("JobNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperationJobNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OperationOpNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("OperationuserId")
                        .HasColumnType("int");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shift")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.HasIndex("OperationuserId", "OperationJobNumber", "OperationOpNumber");

                    b.ToTable("Production");
                });

            modelBuilder.Entity("BackEnd.Models.Settings", b =>
                {
                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("DefaultBarCut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultBarEnd")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultStartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNew")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipLathe")
                        .HasColumnType("bit");

                    b.Property<bool>("SkipMill")
                        .HasColumnType("bit");

                    b.HasKey("userId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("BackEnd.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackEnd.Models.ChangeLog", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("ChangeLog")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Hourly", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Operation", "Operation")
                        .WithMany("Hourly")
                        .HasForeignKey("OperationuserId", "OperationJobNumber", "OperationOpNumber");
                });

            modelBuilder.Entity("BackEnd.Models.Job", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Part", "Part")
                        .WithMany("Jobs")
                        .HasForeignKey("PartuserId", "PartNumber1");
                });

            modelBuilder.Entity("BackEnd.Models.Mach", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("Machine")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Operation", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Job", "Job")
                        .WithMany("Operation")
                        .HasForeignKey("userId", "JobNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Part", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany("Part")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEnd.Models.Production", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEnd.Models.Operation", "Operation")
                        .WithMany("Production")
                        .HasForeignKey("OperationuserId", "OperationJobNumber", "OperationOpNumber");
                });

            modelBuilder.Entity("BackEnd.Models.Settings", b =>
                {
                    b.HasOne("BackEnd.Models.User", "User")
                        .WithOne("Settings")
                        .HasForeignKey("BackEnd.Models.Settings", "userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
